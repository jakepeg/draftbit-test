'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.create = exports.compose = exports.applyWidth = void 0;

//******* FILE IS COPIED FROM ../builder/src/utilities/StyleSheet.js ******
//************************* DO NOT EDIT BY HAND ************************
const create = styles => styles; // Like StyleSheet.compose, but concatenates shared keys' values into arrays.

exports.create = create;

const compose = (style1, style2) => {
  const res = { ...style1 };

  if (!style1) {
    return style2;
  }

  if (!style2) {
    return style1;
  }

  for (const [k, v] of Object.entries(style2)) {
    let resV = res[k];

    if (resV === undefined) {
      res[k] = v;
    } else if (Array.isArray(resV) && Array.isArray(v)) {
      res[k] = resV.concat(v);
    } else if (Array.isArray(resV)) {
      res[k] = resV.concat([v]);
    } else if (Array.isArray(v)) {
      res[k] = [resV].concat(v);
    } else {
      res[k] = [resV, v];
    }
  }

  return res;
}; // Given a window width, convert a the style to a StyleSheet style, using values from
// the highest and most recent minWidth for each style key, which fits within the minWidth.

exports.compose = compose;

const applyWidth = (style, width) => {
  const res = {};

  if (!style) {
    return {};
  }

  for (const [k, v] of Object.entries(style)) {
    let resV; // If there is an array of values, choose the last one with the largest minWidth
    // which fits in the current screen width

    if (Array.isArray(v)) {
      let maxMinWidth = 0;
      v.filter(innerV => innerV !== undefined).forEach(innerV => {
        const minWidth = innerV.minWidth ?? 0;
        const value = innerV.value ?? innerV;

        if (minWidth <= width && minWidth >= maxMinWidth) {
          resV = value;
          maxMinWidth = minWidth;
        }
      }); // Otherwise, check if the value fits in the current screen width
    } else if (v !== undefined) {
      const minWidth = v.minWidth ?? 0;
      const value = v.value ?? v;

      if (minWidth <= width) {
        resV = value;
      }
    }

    if (resV !== undefined) {
      res[k] = resV;
    }
  }

  return res;
};

exports.applyWidth = applyWidth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGUiLCJzdHlsZXMiLCJjb21wb3NlIiwic3R5bGUxIiwic3R5bGUyIiwicmVzIiwiayIsInYiLCJPYmplY3QiLCJlbnRyaWVzIiwicmVzViIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsImFwcGx5V2lkdGgiLCJzdHlsZSIsIndpZHRoIiwibWF4TWluV2lkdGgiLCJmaWx0ZXIiLCJpbm5lclYiLCJmb3JFYWNoIiwibWluV2lkdGgiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9TdHlsZVNoZWV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vKioqKioqKiBGSUxFIElTIENPUElFRCBGUk9NIC4uL2J1aWxkZXIvc3JjL3V0aWxpdGllcy9TdHlsZVNoZWV0LmpzICoqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqIERPIE5PVCBFRElUIEJZIEhBTkQgKioqKioqKioqKioqKioqKioqKioqKioqXG5leHBvcnQgY29uc3QgY3JlYXRlID0gc3R5bGVzID0+IHN0eWxlcztcblxuLy8gTGlrZSBTdHlsZVNoZWV0LmNvbXBvc2UsIGJ1dCBjb25jYXRlbmF0ZXMgc2hhcmVkIGtleXMnIHZhbHVlcyBpbnRvIGFycmF5cy5cbmV4cG9ydCBjb25zdCBjb21wb3NlID0gKHN0eWxlMSwgc3R5bGUyKSA9PiB7XG4gIGNvbnN0IHJlcyA9IHsgLi4uc3R5bGUxIH07XG4gIGlmICghc3R5bGUxKSB7XG4gICAgcmV0dXJuIHN0eWxlMjtcbiAgfVxuICBpZiAoIXN0eWxlMikge1xuICAgIHJldHVybiBzdHlsZTE7XG4gIH1cbiAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoc3R5bGUyKSkge1xuICAgIGxldCByZXNWID0gcmVzW2tdO1xuICAgIGlmIChyZXNWID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc1trXSA9IHY7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1YpICYmIEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgIHJlc1trXSA9IHJlc1YuY29uY2F0KHYpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNWKSkge1xuICAgICAgcmVzW2tdID0gcmVzVi5jb25jYXQoW3ZdKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgIHJlc1trXSA9IFtyZXNWXS5jb25jYXQodik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trXSA9IFtyZXNWLCB2XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbi8vIEdpdmVuIGEgd2luZG93IHdpZHRoLCBjb252ZXJ0IGEgdGhlIHN0eWxlIHRvIGEgU3R5bGVTaGVldCBzdHlsZSwgdXNpbmcgdmFsdWVzIGZyb21cbi8vIHRoZSBoaWdoZXN0IGFuZCBtb3N0IHJlY2VudCBtaW5XaWR0aCBmb3IgZWFjaCBzdHlsZSBrZXksIHdoaWNoIGZpdHMgd2l0aGluIHRoZSBtaW5XaWR0aC5cbmV4cG9ydCBjb25zdCBhcHBseVdpZHRoID0gKHN0eWxlLCB3aWR0aCkgPT4ge1xuICBjb25zdCByZXMgPSB7fTtcbiAgaWYgKCFzdHlsZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhzdHlsZSkpIHtcbiAgICBsZXQgcmVzVjtcbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBhcnJheSBvZiB2YWx1ZXMsIGNob29zZSB0aGUgbGFzdCBvbmUgd2l0aCB0aGUgbGFyZ2VzdCBtaW5XaWR0aFxuICAgIC8vIHdoaWNoIGZpdHMgaW4gdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgIGxldCBtYXhNaW5XaWR0aCA9IDA7XG4gICAgICB2LmZpbHRlcihpbm5lclYgPT4gaW5uZXJWICE9PSB1bmRlZmluZWQpLmZvckVhY2goaW5uZXJWID0+IHtcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBpbm5lclYubWluV2lkdGggPz8gMDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbm5lclYudmFsdWUgPz8gaW5uZXJWO1xuICAgICAgICBpZiAobWluV2lkdGggPD0gd2lkdGggJiYgbWluV2lkdGggPj0gbWF4TWluV2lkdGgpIHtcbiAgICAgICAgICByZXNWID0gdmFsdWU7XG4gICAgICAgICAgbWF4TWluV2lkdGggPSBtaW5XaWR0aDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIHRoZSB2YWx1ZSBmaXRzIGluIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aFxuICAgIH0gZWxzZSBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBtaW5XaWR0aCA9IHYubWluV2lkdGggPz8gMDtcbiAgICAgIGNvbnN0IHZhbHVlID0gdi52YWx1ZSA/PyB2O1xuICAgICAgaWYgKG1pbldpZHRoIDw9IHdpZHRoKSB7XG4gICAgICAgIHJlc1YgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc1YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tdID0gcmVzVjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHQyxNQUFNLElBQUlBLE1BQXpCLEMsQ0FFUDs7Ozs7QUFDTyxNQUFNQyxPQUFPLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEtBQW9CO0VBQ3pDLE1BQU1DLEdBQUcsR0FBRyxFQUFFLEdBQUdGO0VBQUwsQ0FBWjs7RUFDQSxJQUFJLENBQUNBLE1BQUwsRUFBYTtJQUNYLE9BQU9DLE1BQVA7RUFDRDs7RUFDRCxJQUFJLENBQUNBLE1BQUwsRUFBYTtJQUNYLE9BQU9ELE1BQVA7RUFDRDs7RUFDRCxLQUFLLE1BQU0sQ0FBQ0csQ0FBRCxFQUFJQyxDQUFKLENBQVgsSUFBcUJDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTCxNQUFm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
